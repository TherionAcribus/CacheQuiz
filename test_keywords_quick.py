"""
Tests rapides pour v√©rifier que le syst√®me de mots-cl√©s fonctionne

Usage:
    python test_keywords_quick.py
"""

from app import app, db
from models import Keyword, Question

def test_keyword_creation():
    """Test 1 : Cr√©er un mot-cl√©"""
    print("\n=== Test 1 : Cr√©ation d'un mot-cl√© ===")
    with app.app_context():
        # Cr√©er un mot-cl√© de test
        keyword = Keyword(name="test_keyword", language="fr", description="Test")
        db.session.add(keyword)
        db.session.commit()
        
        # V√©rifier qu'il existe
        found = Keyword.query.filter_by(name="test_keyword").first()
        if found:
            print(f"‚úÖ Mot-cl√© cr√©√© : {found.name} (ID: {found.id})")
            
            # Nettoyer
            db.session.delete(found)
            db.session.commit()
            print("‚úÖ Mot-cl√© supprim√© (nettoyage)")
        else:
            print("‚ùå √âchec : Mot-cl√© non trouv√©")

def test_keyword_model():
    """Test 2 : V√©rifier les m√©thodes du mod√®le"""
    print("\n=== Test 2 : M√©thodes du mod√®le Keyword ===")
    with app.app_context():
        keyword = Keyword(name="mingo", language="fr", description="Cache miniature")
        db.session.add(keyword)
        db.session.commit()
        
        # Test to_dict()
        data = keyword.to_dict()
        if 'id' in data and 'name' in data and data['name'] == 'mingo':
            print(f"‚úÖ to_dict() fonctionne : {data}")
        else:
            print(f"‚ùå to_dict() √©choue : {data}")
        
        # Nettoyer
        db.session.delete(keyword)
        db.session.commit()

def test_question_keyword_relation():
    """Test 3 : Association Question ‚Üî Keyword"""
    print("\n=== Test 3 : Relation Question ‚Üî Keyword ===")
    with app.app_context():
        # Cr√©er un mot-cl√©
        keyword1 = Keyword(name="test_relation_1", language="fr")
        keyword2 = Keyword(name="test_relation_2", language="fr")
        db.session.add(keyword1)
        db.session.add(keyword2)
        db.session.flush()
        
        # Trouver une question existante ou cr√©er une question de test
        question = Question.query.first()
        if not question:
            print("‚ö†Ô∏è  Aucune question existante, impossible de tester la relation")
            db.session.rollback()
            return
        
        # Sauvegarder les mots-cl√©s actuels pour les restaurer
        original_keywords = list(question.keywords)
        
        # Associer les mots-cl√©s
        question.keywords.append(keyword1)
        question.keywords.append(keyword2)
        db.session.commit()
        
        # V√©rifier l'association
        question = Question.query.get(question.id)
        if keyword1 in question.keywords and keyword2 in question.keywords:
            print(f"‚úÖ Association r√©ussie : Question {question.id} a {len(question.keywords)} mots-cl√©s")
            
            # V√©rifier to_dict()
            data = question.to_dict()
            if 'keywords' in data and len(data['keywords']) >= 2:
                print(f"‚úÖ to_dict() inclut les keywords : {[k['name'] for k in data['keywords']]}")
            else:
                print(f"‚ùå to_dict() n'inclut pas les keywords correctement")
        else:
            print("‚ùå Association √©chou√©e")
        
        # Restaurer l'√©tat original
        question.keywords = original_keywords
        db.session.delete(keyword1)
        db.session.delete(keyword2)
        db.session.commit()
        print("‚úÖ Donn√©es restaur√©es (nettoyage)")

def test_database_tables():
    """Test 4 : V√©rifier que les tables existent"""
    print("\n=== Test 4 : V√©rification des tables ===")
    with app.app_context():
        try:
            # Tester la table keywords
            count = db.session.query(Keyword).count()
            print(f"‚úÖ Table 'keywords' existe : {count} enregistrement(s)")
            
            # Tester la table d'association question_keywords
            result = db.session.execute(db.text("SELECT name FROM sqlite_master WHERE type='table' AND name='question_keywords'"))
            if result.fetchone():
                print("‚úÖ Table d'association 'question_keywords' existe")
            else:
                print("‚ùå Table 'question_keywords' n'existe pas")
            
            # Tester la table d'association quiz_rule_set_keywords
            result = db.session.execute(db.text("SELECT name FROM sqlite_master WHERE type='table' AND name='quiz_rule_set_keywords'"))
            if result.fetchone():
                print("‚úÖ Table d'association 'quiz_rule_set_keywords' existe")
            else:
                print("‚ùå Table 'quiz_rule_set_keywords' n'existe pas")
                
        except Exception as e:
            print(f"‚ùå Erreur : {e}")

def test_all():
    """Ex√©cuter tous les tests"""
    print("=" * 70)
    print("Tests rapides du syst√®me de mots-cl√©s")
    print("=" * 70)
    
    try:
        test_database_tables()
        test_keyword_creation()
        test_keyword_model()
        test_question_keyword_relation()
        
        print("\n" + "=" * 70)
        print("‚úÖ Tous les tests sont termin√©s !")
        print("=" * 70)
        print("\nüí° Prochaine √©tape : Ouvrir l'application et tester manuellement")
        print("   1. Ouvrir le formulaire de cr√©ation de question")
        print("   2. Taper dans le champ 'Mots-cl√©s'")
        print("   3. Cr√©er un nouveau mot-cl√©")
        print("   4. Sauvegarder la question")
        print()
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests : {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_all()


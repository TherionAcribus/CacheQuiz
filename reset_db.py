"""
Script pour r√©initialiser compl√®tement la base de donn√©es
"""
from app import app
from models import db, Question, BroadTheme, SpecificTheme, User, Country, ImageAsset
import os

def reset_database():
    """Supprimer et recr√©er compl√®tement la base de donn√©es"""

    print("=" * 70)
    print("[RESET] REINITIALISATION COMPLETE DE LA BASE DE DONNEES")
    print("=" * 70)

    # Supprimer le fichier de base de donn√©es s'il existe
    db_file = 'geocaching_quiz.db'
    if os.path.exists(db_file):
        print(f"[SUPPRESSION] Suppression de {db_file}")
        os.remove(db_file)
    else:
        print(f"[INFO] {db_file} n'existe pas")

    with app.app_context():
        print("\n[CREATION] Creation des tables...")

        # Supprimer toutes les tables existantes (pour √©viter les conflits)
        try:
            db.drop_all()
            print("[INFO] Tables existantes supprimees")
        except Exception as e:
            print(f"[WARN] Erreur lors de la suppression des tables: {e}")

        # Cr√©er toutes les tables avec le nouveau sch√©ma
        db.create_all()
        print("[OK] Tables creees")

        # Cr√©er les th√®mes par d√©faut
        print("\n[THEMES] Creation des themes par defaut...")
        sample_themes = [
            {
                'name': 'R√®gles',
                'description': 'Questions sur les r√®gles officielles du g√©ocaching',
                'language': 'fr',
                'icon': 'üìñ',
                'color': '#3b82f6'
            },
            {
                'name': 'Terminologie',
                'description': 'Acronymes et termes sp√©cifiques au g√©ocaching',
                'language': 'fr',
                'icon': 'üí¨',
                'color': '#8b5cf6'
            },
            {
                'name': 'Types de caches',
                'description': 'Questions sur les diff√©rents types de geocaches',
                'language': 'fr',
                'icon': 'üì¶',
                'color': '#ec4899'
            },
            {
                'name': 'Histoire',
                'description': 'Histoire et √©volution du g√©ocaching',
                'language': 'fr',
                'icon': 'üï∞Ô∏è',
                'color': '#f59e0b'
            },
            {
                'name': 'Technique',
                'description': 'GPS, navigation, coordonn√©es',
                'language': 'fr',
                'icon': '‚öôÔ∏è',
                'color': '#10b981'
            },
            {
                'name': 'Communaut√©',
                'description': 'Events, m√©ga-events, culture du g√©ocaching',
                'language': 'fr',
                'icon': 'üë•',
                'color': '#06b6d4'
            }
        ]

        themes = {}
        for theme_data in sample_themes:
            theme = BroadTheme(**theme_data)
            db.session.add(theme)
            db.session.flush()
            themes[theme_data['name']] = theme.id
            print(f"   [CREE] {theme_data['name']} (ID: {theme.id})")

        db.session.commit()
        print(f"[OK] {len(sample_themes)} themes crees")

        # Cr√©er les sous-th√®mes d'exemple
        print("\n[SOUS-THEMES] Creation des sous-themes d'exemple...")
        sample_specific_themes = [
            # Pour le th√®me "R√®gles"
            {
                'name': 'Tailles de caches',
                'description': 'Questions sur les diff√©rentes tailles de geocaches',
                'language': 'fr',
                'icon': 'üìè',
                'color': '#3b82f6',
                'broad_theme_name': 'R√®gles'
            },
            {
                'name': 'R√®gles de publication',
                'description': 'R√®gles pour publier une cache',
                'language': 'fr',
                'icon': 'üìã',
                'color': '#3b82f6',
                'broad_theme_name': 'R√®gles'
            },
            {
                'name': 'Attributs',
                'description': 'Signification des attributs des caches',
                'language': 'fr',
                'icon': 'üè∑Ô∏è',
                'color': '#3b82f6',
                'broad_theme_name': 'R√®gles'
            },

            # Pour le th√®me "Terminologie"
            {
                'name': 'Acronymes courants',
                'description': 'FTF, DNF, TFTC et autres acronymes',
                'language': 'fr',
                'icon': 'üí¨',
                'color': '#8b5cf6',
                'broad_theme_name': 'Terminologie'
            },
            {
                'name': 'Termes techniques',
                'description': 'Vocabulaire sp√©cifique au g√©ocaching',
                'language': 'fr',
                'icon': 'üîß',
                'color': '#8b5cf6',
                'broad_theme_name': 'Terminologie'
            },

            # Pour le th√®me "Types de caches"
            {
                'name': 'Traditional Cache',
                'description': 'Le type de cache le plus classique',
                'language': 'fr',
                'icon': 'üì¶',
                'color': '#ec4899',
                'broad_theme_name': 'Types de caches'
            },
            {
                'name': 'Mystery/Puzzle Cache',
                'description': 'Caches n√©cessitant de r√©soudre une √©nigme',
                'language': 'fr',
                'icon': 'üß©',
                'color': '#ec4899',
                'broad_theme_name': 'Types de caches'
            },
            {
                'name': 'Multi-cache',
                'description': 'Caches avec plusieurs √©tapes',
                'language': 'fr',
                'icon': 'üìç',
                'color': '#ec4899',
                'broad_theme_name': 'Types de caches'
            },

            # Pour le th√®me "Histoire"
            {
                'name': 'Cr√©ation du g√©ocaching',
                'description': 'Comment le g√©ocaching a √©t√© invent√©',
                'language': 'fr',
                'icon': 'üï∞Ô∏è',
                'color': '#f59e0b',
                'broad_theme_name': 'Histoire'
            },
            {
                'name': '√âvolution',
                'description': 'Comment le g√©ocaching a √©volu√©',
                'language': 'fr',
                'icon': 'üìà',
                'color': '#f59e0b',
                'broad_theme_name': 'Histoire'
            },

            # Pour le th√®me "Technique"
            {
                'name': 'GPS et coordonn√©es',
                'description': 'Utilisation du GPS et format des coordonn√©es',
                'language': 'fr',
                'icon': 'üõ∞Ô∏è',
                'color': '#10b981',
                'broad_theme_name': 'Technique'
            },
            {
                'name': 'Applications',
                'description': 'Logiciels et applications de g√©ocaching',
                'language': 'fr',
                'icon': 'üì±',
                'color': '#10b981',
                'broad_theme_name': 'Technique'
            },

            # Pour le th√®me "Communaut√©"
            {
                'name': 'Events',
                'description': 'Organisation d\'√©v√©nements de g√©ocaching',
                'language': 'fr',
                'icon': 'üéâ',
                'color': '#06b6d4',
                'broad_theme_name': 'Communaut√©'
            },
            {
                'name': 'Reviewers',
                'description': 'R√¥le et fonctionnement des reviewers',
                'language': 'fr',
                'icon': 'üëÄ',
                'color': '#06b6d4',
                'broad_theme_name': 'Communaut√©'
            }
        ]

        specific_themes_created = {}
        for st_data in sample_specific_themes:
            broad_theme = themes.get(st_data['broad_theme_name'])
            if broad_theme:
                specific_theme = SpecificTheme(
                    name=st_data['name'],
                    description=st_data['description'],
                    language=st_data['language'],
                    icon=st_data['icon'],
                    color=st_data['color'],
                    broad_theme_id=broad_theme
                )
                db.session.add(specific_theme)
                db.session.flush()
                specific_themes_created[st_data['name']] = specific_theme.id
                print(f"   [CREE] {st_data['name']} (theme: {st_data['broad_theme_name']})")

        db.session.commit()
        print(f"[OK] {len(sample_specific_themes)} sous-themes crees")

        # Cr√©er les utilisateurs d'exemple
        print("\n[UTILISATEURS] Creation des utilisateurs d'exemple...")
        sample_users = [
            {
                'username': 'admin',
                'email': 'admin@geocaching-quiz.com',
                'is_active': True
            },
            {
                'username': 'geocacheur_pro',
                'email': 'jean.dupont@email.com',
                'is_active': True
            },
            {
                'username': 'cacher_lover',
                'email': 'marie.martin@email.com',
                'is_active': True
            },
            {
                'username': 'cache_expert',
                'email': 'pierre.durand@email.com',
                'is_active': True
            }
        ]

        users_created = {}
        for user_data in sample_users:
            user = User(**user_data)
            db.session.add(user)
            db.session.flush()
            users_created[user_data['username']] = user.id
            print(f"   [CREE] @{user_data['username']}")

        db.session.commit()
        print(f"[OK] {len(sample_users)} utilisateurs crees")

        # Cr√©er des pays par d√©faut
        print("\n[PAYS] Creation des pays par defaut...")
        sample_countries = [
            { 'name': 'France',   'code': 'FR', 'flag': 'üá´üá∑', 'language': 'fr' },
            { 'name': 'Belgique', 'code': 'BE', 'flag': 'üáßüá™', 'language': 'fr' },
            { 'name': 'Suisse',   'code': 'CH', 'flag': 'üá®üá≠', 'language': 'fr' },
            { 'name': 'Canada',   'code': 'CA', 'flag': 'üá®üá¶', 'language': 'fr' },
        ]

        countries_by_code = {}
        for c_data in sample_countries:
            country = Country(**c_data)
            db.session.add(country)
            db.session.flush()
            countries_by_code[c_data['code']] = country
            print(f"   [CREE] {c_data['flag']} {c_data['name']} ({c_data['code']})")

        db.session.commit()
        print(f"[OK] {len(sample_countries)} pays crees")

        # Cr√©er des images d'exemple pour les r√©ponses d√©taill√©es
        print("\n[IMAGES] Creation d'images d'exemple...")
        sample_images = [
            {
                'title': 'Exemple cache Micro',
                'filename': 'micro-cache-example.jpg',
                'mime_type': 'image/jpeg',
                'size_bytes': 125000,
                'alt_text': 'Photo d\'un cache Micro montrant sa taille'
            },
            {
                'title': 'Sch√©ma tailles de caches',
                'filename': 'cache-sizes-diagram.png',
                'mime_type': 'image/png',
                'size_bytes': 98000,
                'alt_text': 'Diagramme montrant les diff√©rentes tailles de geocaches'
            },
            {
                'title': 'FTF Celebration',
                'filename': 'ftf-celebration.jpg',
                'mime_type': 'image/jpeg',
                'size_bytes': 245000,
                'alt_text': 'Photo d\'un g√©ocacheur c√©l√©brant son premier FTF'
            }
        ]

        images_created = {}
        for i, img_data in enumerate(sample_images):
            image = ImageAsset(**img_data)
            db.session.add(image)
            db.session.flush()
            images_created[f'image_{i+1}'] = image.id
            print(f"   [CREE] {img_data['title']} ({img_data['filename']})")

        db.session.commit()
        print(f"[OK] {len(sample_images)} images crees")

        # Cr√©er des questions d'exemple
        print("\n[QUESTIONS] Creation des questions d'exemple...")
        sample_questions = [
            {
                'author_id': users_created['admin'],
                'question_text': "Quelle est la taille d'un cache 'Micro'?",
                'possible_answers': "Plus petit qu'un film 35mm|||De la taille d'un film 35mm|||Entre un film 35mm et une bo√Æte √† chaussures|||Plus grand qu'une bo√Æte √† chaussures",
                'answer_images': "|||",
                'correct_answer': '2',
                'detailed_answer': "Un cache Micro est de la taille approximative d'un film 35mm. C'est l'une des plus petites tailles de geocaches.",
                'hint': "Pensez √† un objet photo ancien",
                'source': "https://www.geocaching.com/guide/#toc-0-2",
                'detailed_answer_image_id': images_created.get('image_1'),
                'broad_theme_id': themes['R√®gles'],
                'specific_theme_id': specific_themes_created.get('Tailles de caches'),
                'difficulty_level': 1,
                'is_published': True,
                'country_codes': ['FR']
            },
            {
                'author_id': users_created['geocacheur_pro'],
                'question_text': "Qu'est-ce qu'un 'FTF' en g√©ocaching?",
                'possible_answers': "First To Find (Premier √† trouver)|||Fast To Find (Rapide √† trouver)|||Far To Find (Loin √† trouver)|||Failed To Find (√âchec de recherche)",
                'answer_images': "|||",
                'correct_answer': '1',
                'detailed_answer': "FTF signifie 'First To Find', c'est-√†-dire √™tre la premi√®re personne √† trouver une cache apr√®s sa publication. C'est un honneur recherch√© par de nombreux g√©ocacheurs!",
                'hint': "C'est un honneur pour les g√©ocacheurs comp√©titifs",
                'source': "https://www.geocaching.com/blog/2019/09/20/celebrating-20-years-of-geocaching/",
                'detailed_answer_image_id': images_created.get('image_3'),
                'broad_theme_id': themes['Terminologie'],
                'specific_theme_id': specific_themes_created.get('Acronymes courants'),
                'difficulty_level': 1,
                'is_published': True,
                'country_codes': ['FR', 'BE']
            },
            {
                'author_id': users_created['cacher_lover'],
                'question_text': "Quel type de cache n√©cessite de r√©soudre une √©nigme avant de conna√Ætre les coordonn√©es?",
                'possible_answers': "Traditional Cache|||Multi-Cache|||Mystery Cache|||EarthCache",
                'answer_images': "|||",
                'correct_answer': '3',
                'detailed_answer': "Un Mystery Cache (ou Unknown Cache) n√©cessite de r√©soudre une √©nigme ou un puzzle pour obtenir les coordonn√©es finales. Les coordonn√©es publi√©es ne sont qu'un point de r√©f√©rence.",
                'hint': "Le nom contient le mot 'myst√®re'",
                'broad_theme_id': themes['Types de caches'],
                'specific_theme_id': specific_themes_created.get('Mystery/Puzzle Cache'),
                'difficulty_level': 2,
                'is_published': True,
                'country_codes': ['CA']
            }
        ]

        questions_created = []
        for q_data in sample_questions:
            country_codes = q_data.pop('country_codes', [])
            question = Question(**q_data)
            db.session.add(question)
            db.session.flush()
            if country_codes:
                question.countries = [countries_by_code[code] for code in country_codes if code in countries_by_code]
            questions_created.append(question)
            print(f"   [CREE] Question: {q_data['question_text'][:50]}...")

        db.session.commit()
        print(f"[OK] {len(sample_questions)} questions crees")

        print("\n" + "=" * 70)
        print("[SUCCES] REINITIALISATION TERMINEE !")
        print("=" * 70)
        print("\n[INSTRUCTIONS] :")
        print("   Lancez maintenant : python app.py")
        print("   Puis allez sur : http://localhost:5000")
        print("   Et explorez la nouvelle section 'Themes' !")

if __name__ == '__main__':
    reset_database()
